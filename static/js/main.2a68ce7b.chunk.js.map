{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAOC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAC5B,OACG,yBAAKC,UAAW,uDACZ,yBAAKC,IAAK,SAASC,IAAG,+BAA2BH,EAA3B,cAC1B,6BACI,4BAAKF,GACL,2BAAIC,MCaGK,EAlBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAClB,OACC,6BAEGA,EAAOC,KAAI,SAACC,EAAMC,GACpB,OACC,kBAAC,EAAD,CACKC,IAAOD,EACPR,GAAKK,EAAOG,GAAGR,GACfF,KAAOO,EAAOG,GAAGV,KACjBC,MAASM,EAAOG,GAAGT,WAR1B,MCUaW,EAbG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACnB,OACC,yBAAKV,UAAW,OACf,2BACMA,UAAW,mCACfW,KAAO,SACPC,WAAW,gBACXC,SAAWH,MCCDI,G,MARD,SAACC,GACb,OACE,yBAAKC,MAAQ,CAAEC,UAAW,SAAWC,OAAQ,kBAAoBC,OAAQ,UACxEJ,EAAMK,YCmBIC,E,kDArBb,WAAYN,GAAQ,IAAD,8BACjB,cAAOA,IACFO,MAAO,CACVC,UAAU,GAHK,E,8DAOHC,EAAQC,GACxBC,KAAKC,SAAU,CAACJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAME,MACN,oDAEFE,KAAKX,MAAMK,a,GAhBQQ,aC4CbC,E,kDAtCd,aAAc,IAAD,8BACZ,gBAcDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAdzC,EAAKZ,MAAO,CACXlB,OAAQ,GACR4B,YAAa,IAJF,E,gEAQO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAACvB,OAAQmC,S,+BAQ7B,IAAD,OACDC,EAAgBd,KAAKJ,MAAMlB,OAAOqC,QAAO,SAAArC,GAC9C,OAAOA,EAAOP,KAAK6C,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBAElE,OACC,yBAAK1C,UAAW,MACjB,wBAAIA,UAAW,MAAf,iBACE,kBAAC,EAAD,CAAYU,aAAegB,KAAKI,iBACjC,kBAAC,EAAD,KACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU1B,OAASoC,W,GA9BLZ,aCKCgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.2a68ce7b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name , email, id}) =>{\r\n\treturn(\r\n    <div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt ='robots' src= {`https://robohash.org/${id}?200*200`} />\r\n    <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n    </div>\r\n    </div>\r\n\r\n\t\t   );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots})=>{\r\n\treturn(\r\n  <div>\r\n    {\r\n    \trobots.map((user ,i) =>{\r\n\t\t\treturn (\r\n\t\t\t\t<Card\r\n\t\t\t\t\t\t   key = {i}\r\n\t\t\t\t\t\t   id= {robots[i].id}\r\n\t\t\t\t\t\t   name ={robots[i].name}\r\n\t\t\t\t\t\t   email = {robots[i].email}/>\r\n\t\t\t\t\t  );\r\n\t\t})\r\n    };\r\n  </div>\r\n\t\t    )\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n\treturn(\r\n\t\t<div className ='pa2'>\r\n   <input\r\n\t        className= 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\t\ttype = 'search'\r\n\t\t\t\t\tplacholder='search robots'\r\n\t\t\t\t\tonChange ={searchChange}\r\n\t\t\t\t\t/>\r\n\t </div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n  return (\r\n    <div style ={{ overflowY: 'scroll' , border: '1px solid black' , height: '500px'}}>\r\n    {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends  Component {\r\n  constructor(props) {\r\n    super (props);\r\n    this.state ={\r\n      hasError: false\r\n    }\r\n  }\r\n\r\ncomponentDidCatch(error , info){\r\n  this.setState ({hasError: true})\r\n}\r\n\r\nrender(){\r\n  if (this.state.error) {\r\n    return <h1>Oops. Thats not good</h1>\r\n  }\r\n  return this.props.children\r\n}\r\n\r\n}\r\n\r\n\r\nexport default ErrorBoundry;\r\n","import React,{Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css'\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundry from './ErrorBoundry';\r\n\r\nclass  App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state ={\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users =>this.setState({robots: users}));\r\n\t}\r\n\r\n\r\n\tonSearchChange = (event)=>{\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst filteredRobots =this.state.robots.filter(robots =>{\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\treturn (\r\n\t\t\t<div className ='tc'>\r\n\t\t<h1 className ='f1'> Robo Friends</h1>\r\n\t\t  <SearchBox  searchChange ={this.onSearchChange}/>\r\n\t\t\t<Scroll >\r\n\t\t\t<ErrorBoundry>\r\n\t    <CardList robots= {filteredRobots} />\r\n\t\t\t</ErrorBoundry>\r\n\t\t\t</Scroll>\r\n\t        </div>\r\n\t\t\t   );\r\n\t}\r\n\r\n}\r\n\r\nexport default App ;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {robots} from './robots';\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}